---
description: 
globs: 
alwaysApply: true
---
# Educational Game Development Guidelines

## Project Overview
This project aims to create engaging educational games for a 2.8-year-old child, focusing on early learning concepts through interactive play.

## Current Implementation
- **Planet Hop**: A color recognition and sequencing game built with TypeScript and HTML5 Canvas
  - Status: ✅ Complete and playable
  - Location: `/planet_hop` directory
  - Technology: TypeScript, HTML5 Canvas, Web Audio API

## Project Structure
```
prime_game_lab/
├── plan.md                    # Overall project plan and implementation status
├── planet_hop/               # First game (completed)
│   ├── README.md            # Game documentation
│   ├── package.json         # NPM configuration
│   ├── tsconfig.json        # TypeScript configuration
│   ├── webpack.config.js    # Build configuration
│   ├── src/                 # Source code
│   │   ├── index.ts        # Entry point
│   │   ├── game.ts         # Main game class
│   │   ├── types.ts        # TypeScript interfaces
│   │   ├── audio.ts        # Sound manager
│   │   └── index.html      # HTML template
│   ├── assets/             # Game assets
│   ├── dist/               # Built files (generated)
│   └── node_modules/       # Dependencies
├── [future_game_name]/      # Next game folder (when created)
│   └── ...
└── .cursor/
    └── rules/
        └── agents.mdc       # This guidelines file
```

## Technology Stack (Current)
- **Primary**: TypeScript with HTML5 Canvas for web-based games
- **Build System**: Webpack with TypeScript loader
- **Audio**: Web Audio API for synthetic sound generation
- **Package Management**: npm

## Project Documentation
- Detailed game development plan and implementation status maintained in `plan.md`
- This file (agents.mdc) serves as high-level guidelines and principles
- Each game folder contains its own README.md with game-specific documentation

## Target Audience
- Primary: 2.5 to 3.5 years old children
- Secondary: Parents and caregivers who want to engage in educational play with their children

## Core Educational Goals
1. **Early Learning Concepts**
   - Color recognition ✅ (implemented in Planet Hop)
   - Basic shapes
   - Simple counting
   - Pattern recognition
   - Cause and effect understanding ✅ (implemented in Planet Hop)

2. **Motor Skills Development**
   - Fine motor control ✅ (implemented in Planet Hop)
   - Hand-eye coordination ✅ (implemented in Planet Hop)
   - Touch/click accuracy ✅ (implemented in Planet Hop)
   - Spatial awareness

3. **Cognitive Development**
   - Problem-solving
   - Memory skills ✅ (implemented in Planet Hop)
   - Attention span
   - Following instructions ✅ (implemented in Planet Hop)

## Design Principles
1. **Engagement**
   - Age-appropriate themes ✅ (space theme in Planet Hop)
   - Interactive elements ✅ (clickable planets, animations)
   - Positive feedback ✅ (sounds, particles, encouraging messages)
   - Clear visual cues ✅ (hover effects, prompts)

2. **Accessibility**
   - Large touch/click areas ✅ (80px radius planets)
   - High-contrast visuals ✅ (bright colors on dark background)
   - Simple navigation ✅ (single screen, click-only interaction)
   - Clear instructions ✅ (text prompts)

3. **Learning Through Play**
   - Fun-first approach ✅ (game mechanics before education)
   - Gentle learning curve ✅ (same difficulty, random sequences)
   - Immediate feedback ✅ (sounds, animations)
   - Celebrating achievements ✅ (success sounds, particles)

## Technical Guidelines
1. **Platform Considerations**
   - Web-based for maximum accessibility ✅
   - Smooth performance (60 FPS) ✅
   - Mouse and touch input support ✅
   - Works offline once loaded ✅

2. **Code Organization**
   - Clear, maintainable structure ✅
   - Well-documented code ✅
   - Easy to modify parameters ✅
   - Scalable architecture ✅

3. **Asset Requirements**
   - Child-friendly graphics ✅ (simple shapes, bright colors)
   - Clear, readable text ✅ (large fonts)
   - Engaging sound effects ✅ (synthetic audio)
   - Smooth animations ✅ (tweening, particles)

## Parent Features
1. **Controls**
   - Easy access to settings (planned)
   - Progress monitoring ✅ (score display)
   - Difficulty adjustment (planned)
   - Safe exit options (browser controls)

2. **Customization** (Future Features)
   - Adjustable difficulty
   - Theme options
   - Sound controls
   - Learning focus selection

## Development Priorities
1. **Core Gameplay** ✅
   - Solid educational foundation
   - Engaging mechanics
   - Reliable performance
   - Intuitive interface

2. **User Experience** ✅
   - Smooth interactions
   - Clear feedback
   - Appropriate pacing
   - Error prevention

3. **Educational Value** ✅
   - Measurable learning outcomes
   - Age-appropriate content
   - Progressive difficulty (planned)
   - Skill reinforcement

## Future Considerations
- Additional learning concepts (shapes, numbers, letters)
- New interactive elements
- Progress tracking and analytics
- Multi-language support
- Enhanced accessibility features
- Parent dashboard
- More games in the series
- Mobile app versions
- Progressive Web App (PWA) support

## Development Workflow
1. Each new game should be created in its own directory
2. Follow the established structure from Planet Hop
3. Use TypeScript for type safety
4. Implement responsive design
5. Test on multiple devices
6. Document thoroughly in README.md
7. Update plan.md with progress
